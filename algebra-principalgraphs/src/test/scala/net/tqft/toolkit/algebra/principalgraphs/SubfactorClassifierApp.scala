package net.tqft.toolkit.algebra.principalgraphs

import scala.IndexedSeq

object SubfactorClassifierApp extends App {
  def A3(L: Double) = SubfactorWeed(L, PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1vduals1v1"), BigraphWithDuals("bwd1v1vduals1v1")))

  val ignoring = Seq(PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1v1p1v1x0p0x1p1x0v0x0x1p0x1x0p1x0x0p0x1x0v0x0x0x1p0x1x0x0p1x0x0x0p0x0x1x0p1x0x0x0v1x0x0x0x0p0x0x0x0x1p0x1x0x0x0p0x0x0x1x0p0x0x0x1x0duals1v1v1x3x2v1x3x2x5x4"), BigraphWithDuals("bwd1v1v1p1v1x0p0x1p1x0v0x0x1p0x1x0p0x1x0p1x0x0v0x0x1x0p0x1x0x0p1x0x0x0p0x0x0x1p1x0x0x0v0x0x0x0x1p1x0x0x0x0p0x0x0x1x0p0x1x0x0x0p0x0x0x1x0duals1v1v1x3x2v1x3x2x5x4")),
    PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1v1v1p1v1x0p0x1v1x0p1x0p0x1p0x1v0x1x0x0p0x0x1x0p0x0x0x1v1x0x0p0x1x0p0x0x1p1x0x0v1x0x0x0p0x1x0x0p0x0x1x0duals1v1v1x2v1x3x2x4v1x2x4x3"), BigraphWithDuals("bwd1v1v1v1p1v1x0p1x0v1x0p0x1v0x1p1x0p0x1v1x0x0p0x1x0v0x1p1x0p0x1duals1v1v1x2v1x2v2x1")),
    PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1v1v1p1v1x0p1x0p0x1v0x0x1p0x0x1p1x0x0duals1v1v1x2v1x3x2"), BigraphWithDuals("bwd1v1v1v1p1v1x0p0x1p1x0v0x0x1p0x1x0p1x0x0duals1v1v1x2v1x3x2")),
    PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1v1v1p1v1x0p1x0p0x1v0x1x0p0x0x1p0x0x1p1x0x0v1x0x0x0p0x0x1x0p0x0x0x1p1x0x0x0v0x0x0x1p0x0x1x0p0x1x0x0p1x0x0x0v0x0x0x1p0x1x0x0p0x0x1x0p1x0x0x0p0x0x1x0v0x0x1x0x0p0x0x0x0x1p0x0x0x1x0p0x1x0x0x0p1x0x0x0x0v0x0x1x0x0p0x0x0x0x1p0x0x0x1x0p1x0x0x0x0p0x1x0x0x0p0x0x0x1x0duals1v1v1x2v1x2x4x3v1x2x4x3v1x3x2x5x4"), BigraphWithDuals("bwd1v1v1v1p1v1x0p0x1p1x0v0x0x1p0x1x0p0x1x0p1x0x0v0x0x0x1p0x0x1x0p1x0x0x0p0x1x0x0v0x0x0x1p1x0x0x0p0x0x1x0p0x1x0x0p0x0x0x1p1x0x0x0v0x0x1x0x0x0p0x0x0x1x0x0p0x1x0x0x0x0p0x0x0x0x0x1p0x0x0x0x1x0v0x1x0x0x0p0x0x0x1x0p0x0x0x0x1p1x0x0x0x0p0x0x1x0x0p1x0x0x0x0v0x0x0x1x0x0p1x0x0x0x0x0p0x0x0x0x1x0p0x0x0x0x0x1p0x1x0x0x0x0p0x0x1x0x0x0duals1v1v1x2v1x2x4x3v1x2x4x3x6x5v1x2x4x3x6x5")),
    PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1v1v1p1v1x0p1x0p0x1v0x1x0p0x0x1p0x0x1p1x0x0v1x0x0x0p0x0x1x0p0x0x0x1p1x0x0x0v0x0x1x0p0x1x0x0p1x0x0x0duals1v1v1x2v1x2x4x3v1x3x2"), BigraphWithDuals("bwd1v1v1v1p1v1x0p0x1p1x0v0x0x1p0x1x0p0x1x0p1x0x0v0x0x0x1p0x0x1x0p1x0x0x0p0x1x0x0v1x0x0x0p0x0x1x0p0x1x0x0p0x0x0x1p1x0x0x0duals1v1v1x2v1x2x4x3v1x3x2x5x4")),
    PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1v1v1p1v1x0p1x0v1x0p0x1v1x0p0x1p1x0duals1v1v1x2v1x2"), BigraphWithDuals("bwd1v1v1v1p1v1x0p0x1v1x0p0x1p0x1p1x0v1x0x0x0p0x0x0x1p0x0x1x0duals1v1v1x2v1x2x4x3")),
    PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1v1v1p1v1x0p1x0v1x0p0x1v1x0p0x1p1x0p0x1v0x0x0x1p0x0x1x0v1x0p0x1p1x0p0x1v0x1x0x0p0x0x1x0v1x0p0x1p1x0p0x1v0x1x0x0p1x0x0x0duals1v1v1x2v1x2v2x1v1x2v2x1"), BigraphWithDuals("bwd1v1v1v1p1v1x0p0x1v1x0p0x1p0x1p1x0v1x0x0x0p0x1x0x0p0x0x1x0p0x0x0x1v0x0x1x0p0x0x0x1p0x0x1x0p1x0x0x0p0x0x0x1p0x1x0x0v0x0x0x1x0x0p0x1x0x0x0x0p1x0x0x0x0x0p0x0x0x0x0x1v0x0x0x1p1x0x0x0p0x0x1x0p0x1x0x0p0x1x0x0p1x0x0x0p0x0x0x1p0x0x1x0v0x0x1x0x0x0x0x0p0x0x0x1x0x0x0x0p0x0x0x0x0x1x0x0p0x0x0x0x0x0x1x0v1x0x0x0p0x0x1x0p0x0x0x1p0x1x0x0p0x0x1x0p1x0x0x0p0x0x0x1p0x1x0x0duals1v1v1x2v1x2x4x3v1x2x4x3x6x5v2x1x4x3x6x5x8x7v1x2x3x4x6x5x8x7")),
    PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1v1v1p1v1x0p1x0v1x0p0x1v1x0p0x1p1x0p0x1v1x0x0x0p0x0x0x1p0x0x1x0v1x0x0p0x1x0p0x0x1p0x0x1p0x1x0v0x0x1x0x0p0x1x0x0x0p0x0x0x0x1p1x0x0x0x0duals1v1v1x2v1x2v1x3x2v1x2x4x3"), BigraphWithDuals("bwd1v1v1v1p1v1x0p0x1v1x0p0x1p0x1p1x0v1x0x0x0p0x1x0x0p0x0x1x0p0x0x0x1v1x0x0x0p0x0x1x0p0x0x0x1p0x0x1x0p1x0x0x0p0x0x0x1p0x1x0x0v0x0x0x1x0x0x0p0x1x0x0x0x0x0p0x0x1x0x0x0x0p0x0x0x0x0x0x1p0x0x0x0x1x0x0v1x0x0x0x0p0x0x0x0x1p0x0x1x0x0p0x0x1x0x0p0x1x0x0x0p0x0x0x1x0p0x1x0x0x0p0x0x0x0x1p0x0x0x1x0duals1v1v1x2v1x2x4x3v1x2x3x5x4x7x6v1x3x2x5x4x7x6x9x8")),
    PairOfBigraphsWithDuals(BigraphWithDuals("bwd1v1v1v1p1v1x0p1x0v1x0v1p1duals1v1v1x2v1"), BigraphWithDuals("bwd1v1v1v1p1v1x0p0x1v1x0p0x1p1x0v1x0x0p0x1x0duals1v1v1x2v1x3x2")))

  def p(w: SubfactorWeed) = {
    println(w)
    val d0 = w.pair(0).bigraph.estimateEigenvalue(10)
    val d1 = w.pair(1).bigraph.estimateEigenvalue(10)
    println((d0, d1))
    require(w.verifyParent)
    require(d0 < 5.26)
    require(d1 < 5.26)
  }

  //	for(d <- A3.descendantsFiltered(3)) {
  //	  if(d.pair.g0.bigraph.rankAtMaximalDepth == 0 && d.pair.g1.bigraph.rankAtMaximalDepth == 0) {
  //		p(d.DecreaseDepth.result)
  //	  } else if(d.upperObjects.elements.isEmpty) {
  //	    p(d)
  //	  }
  //	}
  var count = 0
  for ((g, children) <- A3(5.25).descendantsTreeFiltered(3, -1, ignoring)) {
    count = count + 1
    p(g)
  } 
  println(s"saw $count graphs")
}